문제
여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.

쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다. 
아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.



이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.

레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다. 
위 예의 괄호 표현은 그림 위에 주어져 있다.

쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다. 

쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.

입력
한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다. 

출력
잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.

예제 입력 1 
()(((()())(())()))(())
예제 출력 1 
17
예제 입력 2 
(((()(()()))(())()))(()())
예제 출력 2 
24

#include <cstdio>
int main(){
	char input[100001];
	scanf("%s",input);
	int sum=0,plus=0;
	for(int i=0;input[i];i++){
		if(input[i]=='('){
			plus++;
			if(input[i+1]==')'){
				plus--;
				sum+=plus;
				i++;
			}
		}
		else{
			sum++;
			plus--;
		}
	}
	printf("%d\n",sum);
}








#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <vector>
using namespace std;
class Stack
{
private:
	int stackArr[100000] = { 0, };
	int topIndex;
public:
	void StackInit(Stack* pstack)
	{
		topIndex = -1;
	}
	bool SIsEmpty(Stack* pstack)
	{
		if (pstack->topIndex == -1)
			return true;
		else
			return false;
	}
	void SPush(Stack* pstack, int temp)
	{
		pstack->topIndex++;
		pstack->stackArr[topIndex] = temp;
	}
	int SPop(Stack* pstack)
	{
		int current = pstack->topIndex;
		pstack->topIndex--;
		return stackArr[current];
	}
	int STop(Stack*  pstack)
	{
		return pstack->stackArr[topIndex];
	}
	int Size(Stack* pstack)
	{
		return (pstack->topIndex) + 1;
	}
};

long long int dp[100];
int main()
{
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	int bar = 0;
	Stack stk;
	stk.StackInit(&stk);
	string sentence;
	getline(cin,sentence);
	for (int i = 0; i < sentence.length(); i++)
	{
		if (sentence[i] == '(')
		{
			stk.SPush(&stk, i);
		}
		else
		{
			if (stk.STop(&stk) + 1 == i)
			{
				stk.SPop(&stk);
				bar += stk.Size(&stk);
			}
			else
			{
				stk.SPop(&stk);
				bar++;
			}
		}
	}
	cout << bar << "\n";
	system("pause");
	return 0;
}
