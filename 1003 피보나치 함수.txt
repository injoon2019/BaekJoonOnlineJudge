문제
다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.

int fibonacci(int n) {
    if (n == 0) {
        printf("0");
        return 0;
    } else if (n == 1) {
        printf("1");
        return 1;
    } else {
        return fibonacci(n?1) + fibonacci(n?2);
    }
}
fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.

fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
fibonacci(0)은 0을 출력하고, 0을 리턴한다.
fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.
1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다.

각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.

출력
각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.

예제 입력 1 
3
0
1
3
예제 출력 1 
1 0
0 1
1 2

#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <vector>
using namespace std;
int memo[41] = { -1, };
int Fibonacci(int n)
{
	int result;
	if (memo[n] != -1)
		result = memo[n];
	else if (n <= 1)
	{
		memo[n] = n;
		result = n;
	}
	else
		result = Fibonacci(n - 1) + Fibonacci(n - 2);
	memo[n] = result;
	return result;
}
int main(void)
{
	for (int i = 0; i < 41; i++)
	{
		memo[i] = -1;
	}
	int testCase;
	cin >> testCase;
	int number;
	while (testCase--)
	{
		cin >> number;
		if (number == 0)
			cout << "1 0\n";
		else
			cout << Fibonacci(number - 1) << " " << Fibonacci(number) << "\n";
	}
	system("pause");
	return 0;
}



규칙을 발견해서 풀었다라고 보셨는데 그렇게 보실 수도 있지만 0과 1이 호출되는 횟수가 피보나치 수열을 이루는것은 수열 특성상 자연스럽게 그렇게 되는 것입니다

fibo(n)은 fibo(n)이 fibo(1)을 호출한 횟수와 같고 fibo(n - 1)은 fibo(n)이 fibo(0)을 호출한 횟수와 같은데

fibo(n - 1)에서 0을 호출한 횟수 + fibo(n - 2)에서 0을 호출한 횟수 = fibo(n)에서 0을 호출한 횟수이며

fibo(n - 1)에서 1을 호출한 횟수 + fibo(n - 2)에서 1을 호출한 횟수 = fibo(n)에서 1을 호출한 횟수입니다

호출 횟수를 나타내는 수열의 점화식이 피보나치와 같으니 당연히 피보나치 수열과 동일해지는 것입니다

fibo(1)에서 1호출횟수는 fibo(1)과 같고 0호출횟수는 fibo(0)과 같으므로 이를 초항으로 잡으면 됩니다

네 그부분이 증명하고자 하는 명제입니다

편의상 fibo(n)이 0을 호출한 횟수를 A(fibo(n))으로 정의하고 fibo(n)이 1을 호출한 횟수를 B(fibo(n))으로 정의하겠습니다

그러면 명제는 다음과 같이 표현할 수 있습니다

임의의 자연수 n에 대하여, A(fibo(n)) = fibo(n-1)이고 B(fibo(n)) = fibo(n)이다

이 명제는 수학적 귀납법으로 증명할 수 있습니다

n이 1인 경우

A(fibo(1))은 0인데 fibo(0)도 0이므로 A(fibo(1)) = fibo(0)을 만족하며, B(fibo(1))은 1인데 fibo(1)도 1이므로 B(fibo(1)) = fibo(1)를 만족합니다

n이 2인 경우

A(fibo(2))은 1인데 fibo(1)도 1이므로 A(fibo(2)) = fibo(1)을 만족하며, B(fibo(2))은 1인데 fibo(2)도 1이므로 B(fibo(2)) = fibo(2)를 만족합니다

임의의 n에 대해서  n - 1과 n - 2가 명제를 만족하는 경우

우선 A(fibo(n)) = A(fibo(n - 1)) + A(fibo(n - 2))이고

B(fibo(n)) = B(fibo(n - 1)) + B(fibo(n - 2))인 것은 자명합니다

그리고 n - 1과 n - 2가 명제를 만족한다고 했으므로

A(fibo(n - 1)) = fibo(n - 2)이고 A(fibo(n - 2))는 fibo(n - 3)이므로 A(fibo(n)) = fibo(n - 2) + fibo(n - 3) = fibo(n - 1)입니다

마찬가지로

B(fibo(n - 1)) = fibo(n - 1)이고 B(fibo(n - 2))는 fibo(n - 2)이므로 B(fibo(n)) = fibo(n - 1) + fibo(n - 2) = fibo(n)입니다

따라서 모든 자연수 n에 대해서 해당 명제를 만족한다는 것을 알 수 있습니다