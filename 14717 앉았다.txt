문제
섰다는 화투를 이용하여 20장의 카드를 가지고 2명 이상이 경기를 하는 게임이다.

이러한 섰다의 규칙을 단순화한 게임이 바로 '앉았다'이다.

앉았다의 규칙은 1, 2, 3, ... , 9, 10이 쓰인 카드가 각 2장씩 주어지며 총 20장의 카드가 사용되며, 2명이 참가한다.

다음은 앉았다의 경기 방법이다.

두 명의 참가자는 순서대로 20장의 카드 중 무작위로 2장의 카드를 가져온다.
상대방이 이미 가지고 간 카드를 중복해서 가져올 수는 없다. 그리고 자신은 어떤 카드를 가져왔는지 알 수 있지만, 상대방이 어떤 카드를 가져갔는지는 알 수 없다.
서로의 패를 공개한다.
강한 족보의 패를 가진 사람이 이긴다. 만약 두 참가자가 같은 족보의 패를 가졌다면 비긴다.
족보 (위에 있는 족보일수록 더 강한 족보이다)

10땡: 두 패가 모두 10
9땡: 두 패가 모두 9
...
2땡: 두 패가 모두 2
1땡: 두 패가 모두 1
9끗: 땡이 아니고, 두 패를 더했을 때 일의 자리의 수가 9
8끗: 땡이 아니고, 두 패를 더했을 때 일의 자리의 수가 8
...
1끗: 땡이 아니고, 두 패를 더했을 때 일의 자리의 수가 1
0끗: 땡이 아니고, 두 패를 더했을 때 일의 자리의 수가 0
예를 들어, 영학이의 패가 1과 1이고, 상대의 패가 10과 9라고 하자.

그렇다면 영학이는 1땡이고, 상대는 9끗이다. 영학이가 더 강한 족보를 가졌으므로 영학이가 상대를 이긴다.

영학이는 자신이 어떤 패를 받았는지 보았고, 상대방의 패는 모르는 상태이다.

영학이는 영악해서 앉았다 게임에서 자신이 이길 확률이 높을 때만 돈을 베팅한다.

영악한 영학이를 위하여 영학이의 패가 입력으로 주어졌을 때 이길 수 있는 확률을 구하여라.

입력
영학이의 패를 뜻하는 두 개의 정수 A, B가 주어진다. (1 ≤ A, B ≤ 10)

출력
영학이가 이길 확률을 소수점 이하 셋 째 자리까지 반올림해서 출력하시오.

반드시 뒤따르는 0도 출력해야 한다. 예를 들어, '0.700'을 출력했다면 정답이고, '0.7'을 출력했다면 오답이다.

예제 입력 1 
1 1
예제 출력 1 
0.941
예제 입력 2 
1 2
예제 출력 2 
0.275
예제 입력 3 
1 9
예제 출력 3 
0.000
예제 입력 4 
10 10
예제 출력 4 
1.000


#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <vector>
using namespace std;
int main(void)
{
	
	int num1, num2;
	cin >> num1 >> num2;
	double percentage;
	int Samecount=0;
	bool samenumber = false;
	int count = 0;
	int two = 0;
	int deck1[20];
	for (int i = 0; i < 20; i++)
	{
		deck1[i] = i + 1;
	}
	for (int i = 0; i < 10; i++)
	{
		deck1[i+10] = i + 1;
	}

	for (int i = 0; i < 20; i++)
	{
		if (deck1[i] == num1 || deck1[i]==num2)
		{
			deck1[i] = -1;
			two++;
			if (two == 2)
				break;
		}
	}
	for (int i = 0; i <19 ; i++)
	{
		for (int k = i + 1; k < 20; k++)
		{
			if (num1 == num2)
			{
				if (deck1[i] == deck1[k] && deck1[i] > num1)
					Samecount++;
				samenumber = true;
			}
			else if ( deck1[i]!= -1 && deck1[k]!=-1 && deck1[i]!=deck1[k])
			{
				if ((num1 + num2) % 10 > (deck1[i] + deck1[k]) % 10)
				{
					count++;
				}
			}
		}
	}
	cout <<fixed << setprecision(3);
	double temp;
	if (samenumber==true)
	{
		percentage = 1 - ((double)Samecount / 153);
		
		cout << percentage;
	}
	else
	{
		percentage = (double)count / 153;
		
		cout << percentage;
	}
	system("pause");
	return 0;
}